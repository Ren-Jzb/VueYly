//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MISDBContainer : DbContext
    {
        public MISDBContainer()
            : base(CommonLib.Config.PlatformConnectionString(true))
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attachments> Attachments { get; set; }
        public virtual DbSet<AuthNode> AuthNode { get; set; }
        public virtual DbSet<AuthNodeButton> AuthNodeButton { get; set; }
        public virtual DbSet<AuthRoleNode> AuthRoleNode { get; set; }
        public virtual DbSet<AuthRoleNodeButton> AuthRoleNodeButton { get; set; }
        public virtual DbSet<Buttons> Buttons { get; set; }
        public virtual DbSet<Depts> Depts { get; set; }
        public virtual DbSet<Log4net> Log4net { get; set; }
        public virtual DbSet<NodeButton> NodeButton { get; set; }
        public virtual DbSet<Nodes> Nodes { get; set; }
        public virtual DbSet<OperateLog> OperateLog { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<tbBed> tbBed { get; set; }
        public virtual DbSet<tbCall> tbCall { get; set; }
        public virtual DbSet<tbCallHg> tbCallHg { get; set; }
        public virtual DbSet<tbCustomer> tbCustomer { get; set; }
        public virtual DbSet<tbDictionary> tbDictionary { get; set; }
        public virtual DbSet<tbDrugBasic> tbDrugBasic { get; set; }
        public virtual DbSet<tbEvaluate> tbEvaluate { get; set; }
        public virtual DbSet<tbFamilyCustomer> tbFamilyCustomer { get; set; }
        public virtual DbSet<tbFamilyTooken> tbFamilyTooken { get; set; }
        public virtual DbSet<tbFamilyUsers> tbFamilyUsers { get; set; }
        public virtual DbSet<tbLaoRenFanShenJiLu> tbLaoRenFanShenJiLu { get; set; }
        public virtual DbSet<tbMessage> tbMessage { get; set; }
        public virtual DbSet<tbMessageShiftInfo> tbMessageShiftInfo { get; set; }
        public virtual DbSet<tbNodesPad> tbNodesPad { get; set; }
        public virtual DbSet<tbNursingCustomer> tbNursingCustomer { get; set; }
        public virtual DbSet<tbNursingInfo> tbNursingInfo { get; set; }
        public virtual DbSet<tbNursingMessage> tbNursingMessage { get; set; }
        public virtual DbSet<tbNursingPer> tbNursingPer { get; set; }
        public virtual DbSet<tbNursingPerExt> tbNursingPerExt { get; set; }
        public virtual DbSet<tbNursingPerLedger> tbNursingPerLedger { get; set; }
        public virtual DbSet<tbNursingRank> tbNursingRank { get; set; }
        public virtual DbSet<tbNursingTooken> tbNursingTooken { get; set; }
        public virtual DbSet<tbOrganization> tbOrganization { get; set; }
        public virtual DbSet<tbOrgTLJGCongYe> tbOrgTLJGCongYe { get; set; }
        public virtual DbSet<tbPaymentPlan> tbPaymentPlan { get; set; }
        public virtual DbSet<tbRoom> tbRoom { get; set; }
        public virtual DbSet<tbSyncUpTable> tbSyncUpTable { get; set; }
        public virtual DbSet<tbTLJGCongYe> tbTLJGCongYe { get; set; }
        public virtual DbSet<tbUserWelfareCentre> tbUserWelfareCentre { get; set; }
        public virtual DbSet<tbWelfareCentre> tbWelfareCentre { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Vm> Vm { get; set; }
        public virtual DbSet<vAuthRoleNode> vAuthRoleNode { get; set; }
        public virtual DbSet<vAuthRoleNodeButton> vAuthRoleNodeButton { get; set; }
        public virtual DbSet<vCustomer> vCustomer { get; set; }
        public virtual DbSet<vFamilyCustomerInfo> vFamilyCustomerInfo { get; set; }
        public virtual DbSet<vFamilyPerLedger> vFamilyPerLedger { get; set; }
        public virtual DbSet<vLeftAuthRoleNode> vLeftAuthRoleNode { get; set; }
        public virtual DbSet<vNodeButton> vNodeButton { get; set; }
        public virtual DbSet<vNursingPerLedger> vNursingPerLedger { get; set; }
        public virtual DbSet<vPaymentPlan> vPaymentPlan { get; set; }
        public virtual DbSet<vUsers> vUsers { get; set; }
    
        public virtual int GetNursingPer(string inputType, Nullable<System.Guid> wId, string separator, Nullable<bool> removeEmptyEntries, ObjectParameter content)
        {
            var inputTypeParameter = inputType != null ?
                new ObjectParameter("InputType", inputType) :
                new ObjectParameter("InputType", typeof(string));
    
            var wIdParameter = wId.HasValue ?
                new ObjectParameter("WId", wId) :
                new ObjectParameter("WId", typeof(System.Guid));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("Separator", separator) :
                new ObjectParameter("Separator", typeof(string));
    
            var removeEmptyEntriesParameter = removeEmptyEntries.HasValue ?
                new ObjectParameter("RemoveEmptyEntries", removeEmptyEntries) :
                new ObjectParameter("RemoveEmptyEntries", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNursingPer", inputTypeParameter, wIdParameter, separatorParameter, removeEmptyEntriesParameter, content);
        }
    
        public virtual int GetNursingPerByApp(string inputType, Nullable<System.Guid> floorId, string separator, Nullable<bool> removeEmptyEntries, ObjectParameter content)
        {
            var inputTypeParameter = inputType != null ?
                new ObjectParameter("InputType", inputType) :
                new ObjectParameter("InputType", typeof(string));
    
            var floorIdParameter = floorId.HasValue ?
                new ObjectParameter("FloorId", floorId) :
                new ObjectParameter("FloorId", typeof(System.Guid));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("Separator", separator) :
                new ObjectParameter("Separator", typeof(string));
    
            var removeEmptyEntriesParameter = removeEmptyEntries.HasValue ?
                new ObjectParameter("RemoveEmptyEntries", removeEmptyEntries) :
                new ObjectParameter("RemoveEmptyEntries", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNursingPerByApp", inputTypeParameter, floorIdParameter, separatorParameter, removeEmptyEntriesParameter, content);
        }
    
        public virtual ObjectResult<PROC_Spec_NursingCustomerDay_Result> PROC_Spec_NursingCustomerDay(string nursingContent)
        {
            var nursingContentParameter = nursingContent != null ?
                new ObjectParameter("NursingContent", nursingContent) :
                new ObjectParameter("NursingContent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_Spec_NursingCustomerDay_Result>("PROC_Spec_NursingCustomerDay", nursingContentParameter);
        }
    
        public virtual int SetCustomerCharge(Nullable<System.DateTime> dateTime, Nullable<int> month, Nullable<System.Guid> wId, Nullable<System.Guid> uId, ObjectParameter num)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var wIdParameter = wId.HasValue ?
                new ObjectParameter("WId", wId) :
                new ObjectParameter("WId", typeof(System.Guid));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCustomerCharge", dateTimeParameter, monthParameter, wIdParameter, uIdParameter, num);
        }
    
        public virtual int UpdateChargeSituation(Nullable<System.DateTime> dateTime, Nullable<int> month, Nullable<System.Guid> wId, Nullable<System.Guid> uId, ObjectParameter num)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var wIdParameter = wId.HasValue ?
                new ObjectParameter("WId", wId) :
                new ObjectParameter("WId", typeof(System.Guid));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChargeSituation", dateTimeParameter, monthParameter, wIdParameter, uIdParameter, num);
        }
    
        public virtual int UpdateJGCustomerInfo(ObjectParameter num)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateJGCustomerInfo", num);
        }
    
        public virtual int UpdateQApp(ObjectParameter num)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQApp", num);
        }
    }
}
